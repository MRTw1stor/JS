-- Active: 1710147455681@@127.0.0.1@5432@utchet@public

--Функция записи изменения отдела и кабинета

CREATE FUNCTION updateDepartmentAndCabinet(
  accountingEquipmentdParam INT,
  newDepartmentIdParam INT,
  newCabinetParam VARCHAR
)
RETURNS VOID AS
$$
DECLARE
  oldDepartmentId INT;
  oldCabinet VARCHAR(10);
BEGIN
  SELECT department_id, cabinet INTO oldDepartmentId, oldCabinet FROM AccountingEquipment WHERE accountingequipment_id = accountingEquipmentdParam;

  IF newCabinetParam = 'cab' THEN
    newCabinetParam = NULL;
  END IF;

  IF newDepartmentIdParam = 0 THEN
    newDepartmentIdParam = NULL;
  END IF;
  
  IF newDepartmentIdParam IS NOT NULL THEN
    UPDATE AccountingEquipment 
    SET department_id = newDepartmentIdParam
    WHERE accountingequipment_id = accountingEquipmentdParam;

    INSERT INTO ChangesDatas (accountingequipment_id, field_name, old_value, new_value, changes_date)
    VALUES (accountingEquipmentdParam, 'department_id', oldDepartmentId, newDepartmentIdParam, NOW());
  END IF;
    
  IF newCabinetParam IS NOT NULL THEN
    UPDATE AccountingEquipment 
    SET cabinet = newCabinetParam
    WHERE accountingequipment_id = accountingEquipmentdParam;

    INSERT INTO ChangesDatas (accountingequipment_id, field_name, old_value, new_value, changes_date)
    VALUES (accountingEquipmentdParam, 'cabinet', oldCabinet, newCabinetParam, NOW());
  END IF;
END;
$$
LANGUAGE plpgsql;

--Функция записи изменения инвертарного номера 

CREATE FUNCTION updateInventoryNumber(
  accountingEquipmentdParam INT,
  newInventoryNumberParam BIGINT
) 
RETURNS VOID AS
$$
DECLARE
  oldInventoryNumber BIGINT;
BEGIN
  SELECT inventory_number INTO oldInventoryNumber FROM AccountingEquipment WHERE accountingequipment_id = accountingEquipmentdParam;

  UPDATE AccountingEquipment 
  SET inventory_number = newInventoryNumberParam
  WHERE accountingequipment_id = accountingEquipmentdParam;

  INSERT INTO ChangesDatas (accountingequipment_id, field_name, old_value, new_value, changes_date)
  VALUES (accountingEquipmentdParam, 'inventory_number', oldInventoryNumber, newInventoryNumberParam, NOW());
END;
$$
LANGUAGE plpgsql;

--Функция записи изменения технических характеристик станции

CREATE FUNCTION updateWorkStationTechnik(
  stationIdParam INT,
  fieldNameParam VARCHAR(50),
  newValueParam VARCHAR(50)
) 
RETURNS VOID AS 
$$
DECLARE
  oldValueResult VARCHAR(50);
BEGIN
  EXECUTE format('SELECT %I FROM WorkStation WHERE station_id = %s', fieldNameParam, stationIdParam)
  INTO oldValueResult;

  IF newValueParam = '' THEN
    newValueParam = NULL;
  END IF;

  EXECUTE format('UPDATE WorkStation SET %I = %L WHERE station_id = %s', fieldNameParam, newValueParam, stationIdParam);

  INSERT INTO ChangesDatas (accountingEquipment_id, field_name, old_value, new_value, changes_date)
  VALUES (stationIdParam, fieldNameParam, oldValueResult, newValueParam, NOW());
END;
$$ 
LANGUAGE plpgsql;

--Функция записи изменения физических характеристик станции

CREATE FUNCTION updateWorkStationFisical(
  stationIdParam INT,
  fieldNameParam VARCHAR(50),
  newValueParam INT
) 
RETURNS VOID AS 
$$
DECLARE
  oldValueResult INT;
BEGIN
  EXECUTE format('SELECT %I FROM WorkStation WHERE station_id = %s', fieldNameParam, stationIdParam)
  INTO oldValueResult;

  IF newValueParam = 0 THEN
    newValueParam = NULL;
  END IF;

  EXECUTE format('UPDATE WorkStation SET %I = %L WHERE station_id = %s', fieldNameParam, newValueParam, stationIdParam);

  INSERT INTO ChangesDatas (accountingEquipment_id, field_name, old_value, new_value, changes_date)
  VALUES (stationIdParam, fieldNameParam, oldValueResult, newValueParam, NOW());
END;
$$ 
LANGUAGE plpgsql;

--Функция записи изменения статуса станции 

CREATE FUNCTION toggleStationStatus(
  stationIdParam INT
)
RETURNS VOID AS 
$$
DECLARE
  currentStatus BOOLEAN;
BEGIN

  SELECT station_status
  INTO currentStatus
  FROM WorkStation
  WHERE station_id = stationIdParam;

  IF currentStatus THEN
    UPDATE WorkStation SET station_status = FALSE WHERE station_id = stationIdParam;
    INSERT INTO ChangesDatas (accountingEquipment_id, field_name, old_value, new_value, changes_date)
    VALUES (stationIdParam, 'station_status', true, false, NOW());
  ELSE
    UPDATE WorkStation SET station_status = TRUE WHERE station_id = stationIdParam;
    INSERT INTO ChangesDatas (accountingEquipment_id, field_name, old_value, new_value, changes_date)
    VALUES (stationIdParam, 'station_status', false, true, NOW());
  END IF;
END;
$$
LANGUAGE plpgsql;

-- Функция записи изменения данных в легких таблицах

CREATE FUNCTION updateEasyTables(
  tableNameParam VARCHAR,
  lineIdParam INT,
  newNameParam VARCHAR,
  newValueParam INT
) 
RETURNS VOID AS 
$$
BEGIN
  IF tableNameParam = 'departments' THEN
    UPDATE Departments SET department_name = newNameParam WHERE department_id = lineIdParam;
  ELSIF tableNameParam = 'monitorbrands' THEN
    UPDATE MonitorBrands SET brand_name = newNameParam WHERE brand_id = lineIdParam;
  ELSIF tableNameParam = 'disksbrands' THEN
    UPDATE DisksBrands SET brand_name = newNameParam WHERE brand_id = lineIdParam;
  ELSIF tableNameParam = 'stantionsmodels' THEN
    UPDATE StantionsModels SET model_name = newNameParam WHERE model_id = lineIdParam;
  ELSIF tableNameParam = 'operatingsystems' THEN
    UPDATE OperatingSystems SET operatingSystem_name = newNameParam WHERE operatingSystem_id = lineIdParam;
  ELSIF tableNameParam = 'processors' THEN
    UPDATE Processors SET processor_name = newNameParam WHERE processor_id = lineIdParam;
  ELSIF tableNameParam = 'diskscapasity' THEN
    UPDATE DisksCapasity SET capasity_name = newValueParam WHERE capasity_id = lineIdParam;
  ELSIF tableNameParam = 'ram' THEN
    UPDATE RAM SET ram_capacity = newValueParam WHERE ram_id = lineIdParam;
  ELSIF tableNameParam = 'conturs' THEN
    UPDATE Conturs SET contur_name = newNameParam WHERE contur_id = lineIdParam;
  END IF;
END;
$$ 
LANGUAGE plpgsql;

-- Функция записи изменения данных в сложных таблицах

CREATE FUNCTION updateDifficultTables(
  tableNameParam VARCHAR,
  lineIdParam INT,
  newNameParam VARCHAR,
  newBrandIdParam INT,
  newCapasityIdParam INT
) 
RETURNS VOID AS 
$$
BEGIN
  IF tableNameParam = 'monitormodels' THEN
    IF newBrandIdParam = 0 THEN
      UPDATE MonitorModels SET model_name = newNameParam WHERE model_id = lineIdParam;

    ELSIF newNameParam = '' THEN
      UPDATE MonitorModels SET brand_id = newBrandIdParam WHERE model_id = lineIdParam;

    ELSIF newNameParam <> '' AND newBrandIdParam <> 0 THEN
      UPDATE MonitorModels SET brand_id = newBrandIdParam, model_name = newNameParam WHERE model_id = lineIdParam;

    END IF;
  ELSIF tableNameParam = 'disksmodels' THEN
    IF newNameParam <> '' AND newBrandIdParam = 0 AND newCapasityIdParam = 0 THEN
      UPDATE DisksModels SET model_name = newNameParam WHERE model_id = lineIdParam;

    ELSIF newBrandIdParam <> 0 AND newNameParam = '' AND newCapasityIdParam = 0 THEN
      UPDATE DisksModels SET brand_id = newBrandIdParam WHERE model_id = lineIdParam;

    ELSIF newCapasityIdParam <> 0 AND newNameParam = '' AND newBrandIdParam = 0 THEN
      UPDATE DisksModels SET capasity_id = newCapasityIdParam WHERE model_id = lineIdParam;

    ELSIF newBrandIdParam <> 0 AND newNameParam <> '' AND newCapasityIdParam = 0 THEN
      UPDATE DisksModels SET brand_id = newBrandIdParam, model_name = newNameParam WHERE model_id = lineIdParam;

    ELSIF newBrandIdParam <> 0 AND newCapasityIdParam <> 0 AND newNameParam = '' THEN
      UPDATE DisksModels SET brand_id = newBrandIdParam WHERE capasity_id = newCapasityIdParam;

    ELSIF newNameParam <> '' AND newCapasityIdParam <> 0 AND newBrandIdParam = 0 THEN
      UPDATE DisksModels SET model_name = newNameParam, capasity_id = newCapasityIdParam WHERE model_id = lineIdParam;

    ELSIF newBrandIdParam <> 0 AND newNameParam <> '' AND newCapasityIdParam <> 0 THEN
      UPDATE DisksModels SET brand_id = newBrandIdParam, capasity_id = newCapasityIdParam, model_name = newNameParam WHERE model_id = lineIdParam;
    END IF;
  END IF;
END;
$$ 
LANGUAGE plpgsql;